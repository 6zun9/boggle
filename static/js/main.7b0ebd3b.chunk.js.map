{"version":3,"sources":["serviceWorker.js","utils/http.js","services/dictionaryServices.js","constants.js","Boggle.js","index.js"],"names":["Boolean","window","location","hostname","match","http","axios","create","baseURL","process","headers","checkDictionary","word","a","async","formattedData","post","data","Boggle","state","isLoading","score","validWords","isCurrentWordValid","currentWord","randomLetters","setState","checkWord","response","responseData","isValidWord","console","log","generateLetters","length","result","charactersLength","i","push","charAt","Math","floor","random","this","gutter","span","size","spinning","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sHCPSC,E,OAPFC,EAAMC,OAAO,CACzBC,QAHeC,uCAIfC,QAAS,CACR,eAAgB,sBCLX,SAAeC,EAAgBC,GAA/B,iBAAAC,EAAAC,OAAA,sDACO,UACNC,EAAgB,CAACH,QAFlB,WAAAC,EAAA,MAGcR,EAAKW,KAFZ,UAEsBD,IAH7B,cAGCE,EAHD,yBAKEA,GALF,qC,cCFA,ICOcC,E,2MACpBC,MAAQ,CACPC,WAAW,EACXC,MAAO,EACPC,WAAY,GACZC,oBAAoB,EACpBC,YAAa,GACbC,cAAe,I,EAGhBL,UAAY,SAAAA,GACX,EAAKM,SAAS,CACbN,e,EAIFO,UAAY,4BAAAd,EAAAC,OAAA,uDACX,EAAKM,WAAU,GADJ,oBAAAP,EAAA,MAGaF,EAAgB,EAAKQ,MAAMK,cAHxC,OAGJI,EAHI,OAIJC,EAAgBD,GAAYA,EAASX,MAAS,GACpD,EAAKS,SAAS,CACbH,mBAAoBM,EAAaC,cANxB,gDASVC,QAAQC,IAAI,wBATF,QAWX,EAAKZ,WAAU,GAXJ,yD,EAiBZa,gBAAkB,SAAAC,GACjB,IAAIC,EAAS,GAETC,EADa,6BACiBF,OAClC,EAAKd,WAAU,GACf,IAAK,IAAIiB,EAAI,EAAGA,EAAIH,EAAQG,IAC3BF,EAAOG,KAJS,6BAKJC,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,KAG/C,EAAKV,SAAS,CACbD,cAAeU,IAEhB,EAAKf,WAAU,I,mFAIfuB,KAAKV,gBDzDwB,M,+BC4D7B,OACI,kBAAC,IAAD,KACE,kBAAC,IAAD,oBACA,kBAAC,IAAD,KACJ,kBAAC,IAAD,CAAKW,OAAQ,CAAC,GAAI,KACjB,kBAAC,IAAD,CAAKC,KAAM,IACX,kBAAC,IAAD,CAAKA,KAAM,IACV,kBAAC,IAAD,CAAMC,KAAK,QAAQC,SAAUJ,KAAKxB,MAAMC,aAEzC,kBAAC,IAAD,CAAKyB,KAAM,W,GA9DoBG,aCFpCC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SL8H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7b0ebd3b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from \"axios\";\n\nconst baseURI = process.env.REACT_APP_BASE_URI;\n\nconst http = axios.create({\n\tbaseURL: baseURI,\n\theaders: {\n\t\t'Content-Type': 'application/json'\n\t}\n});\n\nexport default http;","import http from '../utils/http';\n\nexport async function checkDictionary(word) {\n  const URI = '/boggle';\n  const formattedData = {word};\n  const data = await http.post(URI, formattedData);\n  \n  return data;\n}","export const NUMBER_OF_FACES = 16;","import React, { Component } from 'react';\nimport { Row, Col, Spin,PageHeader, Layout } from 'antd';\nimport { checkDictionary } from 'src/services/dictionaryServices';\nimport * as constants from 'src/constants';\n\nimport 'antd/dist/antd.css';\nimport 'src/App.css';\nexport default class Boggle extends Component {\n\tstate = {\n\t\tisLoading: false,\n\t\tscore: 0,\n\t\tvalidWords: [],\n\t\tisCurrentWordValid: false,\n\t\tcurrentWord: '',\n\t\trandomLetters: []\n\t};\n\n\tisLoading = isLoading => {\n\t\tthis.setState({\n\t\t\tisLoading\n\t\t});\n\t};\n\n\tcheckWord = async () => {\n\t\tthis.isLoading(true);\n\t\ttry {\n\t\t\tconst response = await checkDictionary(this.state.currentWord);\n\t\t\tconst responseData = (response && response.data) || [];\n\t\t\tthis.setState({\n\t\t\t\tisCurrentWordValid: responseData.isValidWord\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.log('Something went wrong');\n\t\t}\n\t\tthis.isLoading(false);\n\t};\n\n\t/**\n\t * Credit: https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript\n\t */\n\tgenerateLetters = length => {\n\t\tlet result = [];\n\t\tlet characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\t\tlet charactersLength = characters.length;\n\t\tthis.isLoading(true);\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tresult.push(\n\t\t\t\tcharacters.charAt(Math.floor(Math.random() * charactersLength))\n\t\t\t);\n\t\t}\n\t\tthis.setState({\n\t\t\trandomLetters: result\n\t\t});\n\t\tthis.isLoading(false);\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.generateLetters(constants.NUMBER_OF_FACES);\n\t}\n\trender() {\n\t\treturn (\n      <Layout>\n        <PageHeader>Boggle Game</PageHeader>\n        <Layout>\n\t\t\t\t<Row gutter={[16, 16]}>\n\t\t\t\t\t<Col span={4}></Col>\n\t\t\t\t\t<Col span={16}>\n\t\t\t\t\t\t<Spin size=\"large\" spinning={this.state.isLoading}/>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col span={4}></Col>\n\t\t\t\t</Row>\n        </Layout>\n      </Layout>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Boggle from './Boggle';\n\nReactDOM.render(<Boggle />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}